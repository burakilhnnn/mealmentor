// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence.Context;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250426171700_ResetDatabase")]
    partial class ResetDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Food", b =>
                {
                    b.Property<int>("NutritionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NutritionId"));

                    b.Property<int>("Calories")
                        .HasColumnType("integer");

                    b.Property<double>("Carbs")
                        .HasColumnType("double precision");

                    b.Property<double>("Fats")
                        .HasColumnType("double precision");

                    b.Property<string>("MealName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Protein")
                        .HasColumnType("double precision");

                    b.HasKey("NutritionId");

                    b.ToTable("Foods", (string)null);
                });

            modelBuilder.Entity("Domain.Models.History", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MealId")
                        .HasColumnType("text");

                    b.Property<string>("MealType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NutritionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MealId");

                    b.ToTable("Histories", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Meal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Calories")
                        .HasColumnType("integer");

                    b.Property<int>("Carbs")
                        .HasColumnType("integer");

                    b.Property<int>("Fats")
                        .HasColumnType("integer");

                    b.Property<string>("MealName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Protein")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("Domain.Models.MealPlan", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MealPlan", (string)null);
                });

            modelBuilder.Entity("Domain.Models.MealPlans", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("MealPlanId")
                        .HasColumnType("text");

                    b.Property<string>("TabName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MealPlanId");

                    b.ToTable("MealPlans", (string)null);
                });

            modelBuilder.Entity("Domain.Models.MealRow", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Calories")
                        .HasColumnType("integer");

                    b.Property<int>("Carbs")
                        .HasColumnType("integer");

                    b.Property<int>("Fats")
                        .HasColumnType("integer");

                    b.Property<string>("MealName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MealPlansId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MealPlansId1")
                        .HasColumnType("text");

                    b.Property<string>("MealPlansId2")
                        .HasColumnType("text");

                    b.Property<string>("MealPlansId3")
                        .HasColumnType("text");

                    b.Property<string>("MealPlansId4")
                        .HasColumnType("text");

                    b.Property<int>("Protein")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MealPlansId");

                    b.HasIndex("MealPlansId1");

                    b.HasIndex("MealPlansId2");

                    b.HasIndex("MealPlansId3");

                    b.HasIndex("MealPlansId4");

                    b.ToTable("MealRows", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("OpenWelcome")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Sessions", (string)null);
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Domain.Models.UserDetail", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActivityLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<int>("Bmr")
                        .HasColumnType("integer");

                    b.Property<int>("CarbsGrams")
                        .HasColumnType("integer");

                    b.Property<int>("DailyCalories")
                        .HasColumnType("integer");

                    b.Property<int>("FatGrams")
                        .HasColumnType("integer");

                    b.Property<string>("Goal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<double>("KgToLoseGainPerWeek")
                        .HasColumnType("double precision");

                    b.Property<int>("PercentCarbs")
                        .HasColumnType("integer");

                    b.Property<int>("PercentFat")
                        .HasColumnType("integer");

                    b.Property<int>("PercentProtein")
                        .HasColumnType("integer");

                    b.Property<int>("ProteinGrams")
                        .HasColumnType("integer");

                    b.Property<string>("RateOfFatLossMuscleGain")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Tdee")
                        .HasColumnType("integer");

                    b.Property<bool>("UserStatsExist")
                        .HasColumnType("boolean");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.ToTable("UserDetails", (string)null);
                });

            modelBuilder.Entity("Domain.Models.History", b =>
                {
                    b.HasOne("Domain.Models.Meal", "Meal")
                        .WithMany()
                        .HasForeignKey("MealId");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("Domain.Models.MealPlans", b =>
                {
                    b.HasOne("Domain.Models.MealPlan", null)
                        .WithMany("Plans")
                        .HasForeignKey("MealPlanId");
                });

            modelBuilder.Entity("Domain.Models.MealRow", b =>
                {
                    b.HasOne("Domain.Models.MealPlans", "MealPlans")
                        .WithMany()
                        .HasForeignKey("MealPlansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.MealPlans", null)
                        .WithMany("BreakfastRows")
                        .HasForeignKey("MealPlansId1");

                    b.HasOne("Domain.Models.MealPlans", null)
                        .WithMany("DinnerRows")
                        .HasForeignKey("MealPlansId2");

                    b.HasOne("Domain.Models.MealPlans", null)
                        .WithMany("LunchRows")
                        .HasForeignKey("MealPlansId3");

                    b.HasOne("Domain.Models.MealPlans", null)
                        .WithMany("SnacksRows")
                        .HasForeignKey("MealPlansId4");

                    b.Navigation("MealPlans");
                });

            modelBuilder.Entity("Domain.Models.MealPlan", b =>
                {
                    b.Navigation("Plans");
                });

            modelBuilder.Entity("Domain.Models.MealPlans", b =>
                {
                    b.Navigation("BreakfastRows");

                    b.Navigation("DinnerRows");

                    b.Navigation("LunchRows");

                    b.Navigation("SnacksRows");
                });
#pragma warning restore 612, 618
        }
    }
}
